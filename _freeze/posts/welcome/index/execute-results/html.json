{
  "hash": "81ac99f20d1b6c413865dffef1a5f1f2",
  "result": {
    "markdown": "---\ntitle: \"Building a website with Quarto\"\nauthor: \"Nina Dombrowski\"\ndate: \"22-09-2022\"\ncategories: [news]\nimage: \"Quarto.png\"\n---\n\nI recently decided that it is time to update my personal website and realized that the system I used did not fit my needs anymore. So .... what to do?\n\nI recently moved to [Quarto](https://Quarto.org) to document my code and write reports and saw that I could not only use it to document and compile my code but that it is also possible to create a website with Quarto, which turned out to be surprisingly easy.\n\n<html>\n   <body>\n   <style>\n   \n   figcaption {\n   background-color: white;\n   color: white;\n   font-style: italic;\n   padding: 2px;\n   text-align: center;\n}\n   </style>\n   <p align=\"center\">\n      <a href=\"https://quarto.org/docs/websites/\">\n         <img alt=\"Qries\" src=\"Quarto.png\">\n         <figcaption>Click me to go to the Quarto documentation</figcaption>\n      </a>\n      </p>\n   </body>\n</html>\n\n\nThe Quarto webpage comes with an excellent documentation, which I recommend you have a look at first. After doing so myself, I started with setting up a template for a blog by typing this into my terminal:\n\n::: {.cell execution_count=1}\n``` {.bash .cell-code}\nquarto create-project myblog --type website:blog\n```\n:::\n\n\nThis creates a folder with the name `myblog` (so change the name in the command above if you want to have a more creative name) that includes all the required templates to immediately build a test website. \n\nI changed some things to make these templates fir my personal needs. For example, I added more categories, such as a Projects and Publications, into the navbar and moved my personal information to starting page instead of having the blog appear there. Everything I did is documented on my GitHub page (more on that below), so if you want to have some inspiration feel free to have a look [here](https://github.com/ndombrowski/ndombrowski.github.io).\n\nTo see if what I did worked, I just needed one command to check the state of my website: \n\n::: {.cell execution_count=2}\n``` {.bash .cell-code}\nquarto preview\n```\n:::\n\n\nOnce I was happy, I rendered the website with:\n\n::: {.cell execution_count=3}\n``` {.bash .cell-code}\nquarto render\n```\n:::\n\n\nNext, the big question was where to publish my website and luckily quarto works well with different publishing services, such as GitHub Pages, Netlify and it even comes with its own publishing service, Quarto pub. I tried out all three and decided to stick with GitHub Pages since I anyhow use GitHub to back up my code.\n\nFirst I created an empty github repository in order to setup a GitHub Pages site. If you are unfamiliar with how to do this you can find a step-by-step guide [here](https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site). \n\nNext, the only thing I had to do was:\n\n- Set the source branch of the GitHub pages to the gh-pages branch and set the repository to root\n- Ignore some of the files in my folder by adding some lines in the .gitignore:\n    - `/.Quarto/`\n    - `/_site/`\n\nOnce that was set the only thing I had to do was publish the site with \n\n::: {.cell execution_count=4}\n``` {.bash .cell-code}\nquarto publish gh-pages\n```\n:::\n\n\nAnd voila, here we are!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}